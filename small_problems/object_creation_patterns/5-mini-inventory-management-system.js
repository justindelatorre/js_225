// https://launchschool.com/exercises/d6d3971a

/*
- Objective: Build an inventory management system
  - Components:
    - Item Creator: Ensures that all necessary information are PRESENT and VALID
    - Items Manager:
      - Responsible for:
        - Creating items
        - Updating information about items
        - Deleting items
        - Querying information about items
      - Methods
        - create: Creates a new item. Returns false if creation is not successful.
        - update: Accepts an SKU code and an object as arguments, then updates any of the 
          information on an item. Only valid values will be given.
        - delete: Accepts an SKU code and deletes the item from the list. Only valid SKUs will be given.
        - items: Returns all the items.
        - inStock: Lists all the items that have a quantity > 0
        - itemsInCategory: Lists all the items for a given category
    - Reports Manager:
      - Generates reports for:
        - A specific item
          - Generated from report objects, which are created from the report manager
        - All items
          - Generated by the report manager directly
      - Methods
        - init: Accepts the ItemManager object as an argument and assigns it to the items property
        - createReporter: Accepts an SKU code and returns the corresponding object.
          - The returned object has one method, itemInfo, which logs all of the properties of an object as
            key: value pairs (one per line). There should be no other properties or methods on that object.
        - reportInStock: Logs to the console the item names of all items with quantity > 0 as a comma separated
          series.
  - Object: Item
    - Components:
      - SKU code: Unique identifier for a product, consisting of first 3 letters of an item and first 2 letters of its category.
      - Item name: Name of the item. Must be at least 5 characters, and spaces aren't counted in the character count.
      - Category: Category that an item belongs to. Must be at least 5 characters long and only one word, i.e., no spaces allowed.
      - Quantity: Reflects the quantity in stock of an item. Cannot be blank, and only valid numbers, i.e, zero or greater, will be given.
  - Other Notes:
    - No need to validate UNIQUENESS of SKU; duplicates will occur.
    - Each required piece of information for an item corresponds to one property.
    - If any of the required information is not valid, e.g., fewer than 5 character names, the item creator
      should return { notvalid: true }.
    - Created item objects should not have any other methods or properties than those required or those inherited
      from the Object.prototype.
    - Methods can be added to the item manager as necessary.
 */

class ReportManager {
  static items;

  static init(itemManagerObj) {
    this.items = itemManagerObj.items;
  }

  static createReporter(skuCode) {
    let selectedObj = this.items.filter(item => item.skuCode === skuCode)[0];
    let reportObj = Object.create(selectedObj);
    reportObj.itemInfo = function() {
      Object.keys(selectedObj).forEach(key => {
        console.log(`${key}: ${reportObj[key]}`);
      });
    };

    return reportObj;
  }

  static reportInStock() {
    return this.items.filter(item => item.quantity > 0).map(item => item.name).join(', ');
  }
}

class ItemManager {
  static items = [];

  static create(name, category, quantity) {
    let newItem = new Item(name, category, quantity);

    if (newItem.isValid === false) {
      return false;
    } else {
      this.items.push(newItem);
      return newItem;
    }
  }

  static update(skuCode, objWithPropsToChange) {
    let currentItem;
    this.items.forEach(item => {
      if (item.skuCode === skuCode) {
        currentItem = item; 
      }
    });

    Object.keys(objWithPropsToChange).forEach(key => {
      currentItem[key] = objWithPropsToChange[key];
    });
  }

  static delete(skuCode) {
    let objIdx;
    this.items.forEach((item, idx) => {
      if (item.skuCode === skuCode) {
        objIdx = idx;
      }
    });

    this.items.splice(objIdx, 1);
  }

  static inStock() {
    return this.items.filter(item => item.quantity > 0); 
  }

  static itemsInCategory(category) {
    return this.items.filter(item => item.category === category);
  }
}

function Item(name, category, quantity) {
  // Private helper functions
  const isAtLeastFiveCharacters = (str) => { return str.length >= 5 };
  const isAtLeastFiveNonSpaceCharacters = (str) => {
    let nonSpaces = str.match(/[^\s]/g); 
    return nonSpaces ? nonSpaces.length >= 5 : false;
  };
  const isOneWord = (str) => { return !/[\s]/g.test(str); };
  const isNotBlank = (val) => { return String(val).length > 0 };
  const isValidItemName = (itemName) => { return isAtLeastFiveNonSpaceCharacters(itemName) };
  const isValidCategoryValue = (categoryVal) => {
    return isAtLeastFiveCharacters(categoryVal) && isOneWord(categoryVal);
  };
  const isValidQuantity = (quantity) => { return isNotBlank(quantity) && quantity >= 0 };
  const generateSku = (givenName, givenCategory) => {
    let namePart = '';
    let catPart = givenCategory.slice(0, 2);
    
    let idx = 0;
    while (namePart.length < 3) {
      if (givenName[idx] !== ' ') {
        namePart += givenName[idx]; 
      }
      idx += 1;
    }
    
    return (namePart + catPart).toUpperCase();
  };

  // Return value for invalid inputs
  const invalidObj = { isValid: false };

  // Check validity of provided information
  if (!isValidItemName(name) || !isValidCategoryValue(category) || !isValidQuantity(quantity)) {
    return invalidObj;
  }

  return {
    skuCode: generateSku(name, category),
    name,
    category,
    quantity
  };
}

// (Provided) Final test cases
ItemManager.create('basket ball', 'sports', 0);           // valid item
ItemManager.create('asd', 'sports', 0);
ItemManager.create('soccer ball', 'sports', 5);           // valid item
ItemManager.create('football', 'sports');
ItemManager.create('football', 'sports', 3);              // valid item
ItemManager.create('kitchen pot', 'cooking items', 0);
ItemManager.create('kitchen pot', 'cooking', 3);          // valid item

ItemManager.items;       
// returns list with the 4 valid items

ReportManager.init(ItemManager);
ReportManager.reportInStock();
// logs soccer ball,football,kitchen pot

ItemManager.update('SOCSP', { quantity: 0 });
ItemManager.inStock();
// returns list with the item objects for football and kitchen pot
ReportManager.reportInStock();
// logs football,kitchen pot
ItemManager.itemsInCategory('sports');
// returns list with the item objects for basket ball, soccer ball, and football
ItemManager.delete('SOCSP');
ItemManager.items;
// returns list with the remaining 3 valid items (soccer ball is removed from the list)

const kitchenPotReporter = ReportManager.createReporter('KITCO');
kitchenPotReporter.itemInfo();
// logs
// skuCode: KITCO
// itemName: kitchen pot
// category: cooking
// quantity: 3

ItemManager.update('KITCO', { quantity: 10 });
kitchenPotReporter.itemInfo();
// logs
// skuCode: KITCO
// itemName: kitchen pot
// category: cooking
// quantity: 10
